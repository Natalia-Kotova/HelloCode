void FillArray(int[] collection)  // метод который будет заполнять нам массив каждый раз новыми рандомными числами
                                    // void не возвращает ничего, по этой причине в теле метода мы не будем писать return
                                    // FillArray - название метода - можно менять как хочешь
                                    // далее в () указано все по принципу определения массива (ТИП ДАННЫХ [] ИМЯ), по этому у нас int [] collection
{
    int length = collection.Length; // вычисляем размер массива
    int index = 0;                  // назначем "счет" с первого элемента массива, который идет по умолчанию с 0
    while (index < length)          // запускаем цикл , дословно - пока порядковый новер элемента массива будет меньше его размера, в каждый
                                    // новый элемент массива (у нас это collection[index] - имя массива - collection, номер элемента это index)
                                    // кладем новую рандочную цифру в диапазоне от 1 до 9 через new Random().Next(1, 10); и идем к следующему элементу
    {
        collection[index] = new Random().Next(1, 10);
        //index = index + 1;
        index++;
    }
}

void PrintArray(int[] col)      // метод который будет нам выводить на "печать" то есть отображать в терминале эелементы нашего массива
                                // PrintArray - название метода - можно менять как хочешь
                                // далее в () указано все по принципу определения массива (ТИП ДАННЫХ [] ИМЯ), по этому у нас int [] col - col произвольное название - меняй как хочешь
{
    int count = col.Length;     //вычисляем размер массива (тут наименования изменены - делай как тебе удобно)
    int position = 0;           // назначем "счет" с первого элемента массива, который идет по умолчанию с 0 (тут наименования изменены - делай как тебе удобно)
    while (position < count)    // запускаем цикл , дословно - пока порядковый новер элемента массива будет меньше его размера, каждый
                                // элемент выводим на экран  через Сonsole.WriteLine(col[position]);  и идем к следующему элементу
    {
        Console.WriteLine(col[position]);
        position++;
    }
}

// адаптируем прошлую задачу под то, что у нас будет каждый раз массив с рандомнвми числами
// Имеется одномерный массив array из n элементов, требуется найти элемент массива равный find
// 1. Установить счетчик index в позицию 0
// 2. Если array[index] = find, алгоритм завершил работу успешно
// 3. Увеличить index на 1
// 4. Если index < n, то перейти к шагу 2. в противном случае алгоритм завершил работу безуспешно

int IndexOf(int[]collection, int find)  // метод, который перебирает числа до тех пор, пока не встретит в массиве значение find и отобразит
                                        // номер желемента в массиве со значением равныому find, а иначе - все числа в массиве будут перебраны
{
    int count = collection.Length;
    int index = 0;
    int position = -1;
    while (index < count)
    {
        if (collection[index] == find)
        {
            position = index;
            break;
        }
        index++;
    }
    return position;
}

int[] array = new int[10];  // задали команду определить новый рандомный массив из 10 элементов 

FillArray(array);  // метод котоый заполнил наш массив, если бы этого не сделали, то команды выше 
                   // автоматом бы заполнила его нулями, а нам нужны были числа
PrintArray(array); // метод который вывел для нас в терминал то, как выглядит наш новый массив
Console.WriteLine();

int pos = IndexOf(array, 4);
Console.WriteLine(pos);